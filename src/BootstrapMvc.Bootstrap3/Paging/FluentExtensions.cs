using System;
using BootstrapMvc.Core;
using BootstrapMvc.Paging;

namespace BootstrapMvc
{
    public static partial class FluentExtensions
    {
        #region Paginator

        public static Paginator Size(this Paginator target, PaginatorSize value)
        {
            target.SizeValue = value;
            return target;
        }

        #endregion

        #region PaginatorItem

        public static PaginatorItem Disabled(this PaginatorItem target, bool disabled = true)
        {
            target.DisabledValue = disabled;
            return target;
        }

        public static PaginatorItem Active(this PaginatorItem target, bool active = true)
        {
            target.ActiveValue = active;
            return target;
        }

        #endregion

        public static PaginatorGenerator Autogenerated(this Paginator target)
        {
            return new PaginatorGenerator(target);
        }

        public static PaginatorGenerator Autogenerated(this Paginator target, int currentPage, int totalPages)
        {
            return new PaginatorGenerator(target).CurrentPage(currentPage).TotalPages(totalPages);
        }

        #region PaginatorGenerator
        
        public static PaginatorGenerator CurrentPage(this PaginatorGenerator target, int value)
        {
            target.CurrentPageValue = value;
            return target;
        }

        public static PaginatorGenerator TotalPages(this PaginatorGenerator target, int value)
        {
            target.TotalPagesValue = value;
            return target;
        }

        public static PaginatorGenerator PageButtonsCount(this PaginatorGenerator target, int countBack, int countForward)
        {
            target.PageButtonsCountBackValue = countBack;
            target.PageButtonsCountForwardValue = countForward;
            return target;
        }

        public static PaginatorGenerator HidePreviousNextButtons(this PaginatorGenerator target, bool hide = true)
        {
            target.HidePreviousNextButtonsValue = hide;
            return target;
        }

        public static PaginatorGenerator ButtonsText(this PaginatorGenerator target, string currentPageButtonTemplate)
        {
            target.ButtonPageTextTemplateValue = currentPageButtonTemplate;
            return target;
        }

        public static PaginatorGenerator ButtonsText(this PaginatorGenerator target, string currentPageTemplate, string previousPageText, string nextPageText)
        {
            target.ButtonPageTextTemplateValue = currentPageTemplate;
            target.ButtonPreviousTextValue = previousPageText;
            target.ButtonNextTextValue = nextPageText;
            return target;
        }

        public static PaginatorGenerator HrefTemplate(this PaginatorGenerator target, string value)
        {
            target.HrefTemplateValue = value;
            return target;
        } 
        
        #endregion
    }
}
